import OpenAI from 'openai';

const openaiKey = process.env.NEXT_PUBLIC_OPENAI_KEY || '';

export async function analyzeUrl(url: string) {
  if (process.env.NEXT_PUBLIC_BACKEND_URL && !process.env.NEXT_PUBLIC_USE_STATIC_API) {
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/light-analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to analyze URL');
      }
      
      return await response.json();
    } catch (error) {
      console.error('Error using backend API:', error);
    }
  }
  
  const sampleProductNames = [
    "プレミアムTシャツ",
    "オーガニックコットンパーカー",
    "ストレッチデニムジーンズ",
    "防水アウトドアジャケット"
  ];
  
  const sampleCategoryLinks = [
    `${url}/category/clothing`,
    `${url}/category/accessories`,
    `${url}/category/footwear`
  ];
  
  const samplePrices = [2980, 5980, 7980, 12800];
  
  const socialLinks = {
    "instagram": "https://instagram.com/sample_store",
    "twitter": "https://twitter.com/sample_store"
  };
  
  let advice = "静的デモモードでの分析結果です。このECサイトは一般的なUIを持ち、商品構造は標準的です。SNS連携を強化し、価格戦略を見直すことで売上向上が期待できます。モバイル対応も重要です。";
  
  if (openaiKey) {
    try {
      const openai = new OpenAI({ apiKey: openaiKey });
      const prompt = `
        あなたはECサイト分析の専門家です。
        以下のURLのECサイトについて分析してください: ${url}
        
        このサイトの想定される商品数は約20-30個で、価格帯は3,000円〜13,000円程度です。
        
        以下の点について分析し、日本語でアドバイスをまとめてください：
        1. UIとUXの評価
        2. 商品構造と価格戦略
        3. SNS連携の効果
        4. 改善点と具体的な提案
        
        レスポンスは500単語以内でまとめてください。
      `;
      
      const completion = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [{ role: "user", content: prompt }],
        max_tokens: 500,
      });
      
      advice = completion.choices[0].message.content || advice;
    } catch (error) {
      console.error('OpenAI API error:', error);
    }
  }
  
  const diagnosticScores = {
    sns_score: Math.round(Math.random() * 6 + 4) / 10 * 10,
    structure_score: Math.round(Math.random() * 6 + 4) / 10 * 10,
    ux_score: Math.round(Math.random() * 6 + 4) / 10 * 10,
    app_score: Math.round(Math.random() * 6 + 4) / 10 * 10,
    theme_score: Math.round(Math.random() * 6 + 4) / 10 * 10,
  };
  
  const priceRange = `${Math.min(...samplePrices).toLocaleString()}円〜${Math.max(...samplePrices).toLocaleString()}円`;
  const competitorSummary = `商品数: ${sampleProductNames.length}点、価格帯: ${priceRange}、カテゴリー数: ${sampleCategoryLinks.length}個`;
  
  return {
    url,
    product_names: sampleProductNames,
    category_links: sampleCategoryLinks,
    prices: samplePrices,
    advice,
    competitor_summary: competitorSummary,
    social_links: socialLinks,
    diagnostic_scores: diagnosticScores,
  };
}

export async function generatePdf(analysisData: any) {
  if (process.env.NEXT_PUBLIC_BACKEND_URL && !process.env.NEXT_PUBLIC_USE_STATIC_API) {
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/generate-pdf`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(analysisData),
      });
      
      if (!response.ok) {
        throw new Error('Failed to generate PDF');
      }
      
      return await response.arrayBuffer();
    } catch (error) {
      console.error('Error using backend API:', error);
    }
  }
  
  const placeholderPdf = new Uint8Array([
    0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x34, 0x0a, 0x25, 0xc7, 0xec,
    0x8f, 0xa2, 0x0a, 0x31, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c,
    0x3c, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x43, 0x61, 0x74, 0x61, 0x6c,
    0x6f, 0x67, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20, 0x32, 0x20, 0x30,
    0x20, 0x52, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a,
    0x32, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x2f, 0x54,
    0x79, 0x70, 0x65, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x4b, 0x69,
    0x64, 0x73, 0x5b, 0x33, 0x20, 0x30, 0x20, 0x52, 0x5d, 0x2f, 0x43, 0x6f,
    0x75, 0x6e, 0x74, 0x20, 0x31, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f,
    0x62, 0x6a, 0x0a, 0x33, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c,
    0x3c, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x2f,
    0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52,
    0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3c, 0x3c,
    0x2f, 0x46, 0x6f, 0x6e, 0x74, 0x3c, 0x3c, 0x2f, 0x46, 0x31, 0x20, 0x34,
    0x20, 0x30, 0x20, 0x52, 0x3e, 0x3e, 0x3e, 0x3e, 0x2f, 0x43, 0x6f, 0x6e,
    0x74, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x35, 0x20, 0x30, 0x20, 0x52, 0x3e,
    0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, 0x34, 0x20, 0x30,
    0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x2f, 0x54, 0x79, 0x70, 0x65,
    0x2f, 0x46, 0x6f, 0x6e, 0x74, 0x2f, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70,
    0x65, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x31, 0x2f, 0x4e, 0x61, 0x6d, 0x65,
    0x2f, 0x46, 0x31, 0x2f, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x6e, 0x74,
    0x2f, 0x48, 0x65, 0x6c, 0x76, 0x65, 0x74, 0x69, 0x63, 0x61, 0x3e, 0x3e,
    0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, 0x35, 0x20, 0x30, 0x20,
    0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x2f, 0x4c, 0x65, 0x6e, 0x67, 0x74,
    0x68, 0x20, 0x34, 0x34, 0x3e, 0x3e, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
    0x6d, 0x0a, 0x42, 0x54, 0x0a, 0x2f, 0x46, 0x31, 0x20, 0x31, 0x32, 0x20,
    0x54, 0x66, 0x0a, 0x31, 0x30, 0x30, 0x20, 0x34, 0x35, 0x30, 0x20, 0x54,
    0x64, 0x0a, 0x28, 0x48, 0x61, 0x6e, 0x73, 0x6f, 0x6b, 0x75, 0x6e, 0x6f,
    0x75, 0x2d, 0x41, 0x49, 0x20, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20,
    0x44, 0x65, 0x6d, 0x6f, 0x20, 0x50, 0x44, 0x46, 0x29, 0x20, 0x54, 0x6a,
    0x0a, 0x45, 0x54, 0x0a, 0x65, 0x6e, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61,
    0x6d, 0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, 0x78, 0x72, 0x65,
    0x66, 0x0a, 0x30, 0x20, 0x36, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x20, 0x36, 0x35, 0x35, 0x33, 0x35, 0x20, 0x66,
    0x20, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30,
    0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x39, 0x20, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x31, 0x37, 0x33, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e,
    0x20, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x31,
    0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x38, 0x30, 0x20, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65,
    0x72, 0x0a, 0x3c, 0x3c, 0x2f, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x36, 0x2f,
    0x52, 0x6f, 0x6f, 0x74, 0x20, 0x31, 0x20, 0x30, 0x20, 0x52, 0x2f, 0x49,
    0x6e, 0x66, 0x6f, 0x3c, 0x3c, 0x2f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x28,
    0x48, 0x61, 0x6e, 0x73, 0x6f, 0x6b, 0x75, 0x6e, 0x6f, 0x75, 0x2d, 0x41,
    0x49, 0x20, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x29, 0x2f,
    0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x28, 0x53, 0x74, 0x61, 0x74, 0x69,
    0x63, 0x20, 0x44, 0x65, 0x6d, 0x6f, 0x29, 0x3e, 0x3e, 0x3e, 0x3e, 0x0a,
    0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66, 0x0a, 0x35, 0x39,
    0x36, 0x0a, 0x25, 0x25, 0x45, 0x4f, 0x46, 0x0a
  ]);
  return placeholderPdf.buffer;
}
